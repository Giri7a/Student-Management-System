
    document.addEventListener('DOMContentLoaded', async function() {
    const studentTableBody = document.querySelector('#studentTable tbody');
    const addStudentButton = document.getElementById('addStudentButton');
    const studentModal = document.getElementById('studentModal');
    const closeModal = document.querySelector('.close');
    const studentForm = document.getElementById('studentForm');
    const modalTitle = document.getElementById('modalTitle');

    let students = [];
    let isEditing = false;
    let currentStudentIndex = -1;

//fetchStudents: Asynchronously fetches student data from the server (/api/Students/AllStudents).
 // Handling Errors: If fetching fails (response.ok indicates HTTP status code 200-299), an error is logged to the console.
    async function fetchStudents() {
        try {
            const response = await fetch('/api/Students/AllStudents');
            if (!response.ok) {
                throw new Error('Failed to fetch student data');
            }
            students = await response.json();
            displayStudents(students);
        } catch (error) {
            console.error('Error fetching students:', error.message);
        }
    }

//displayStudents: Clears the existing table rows (studentTableBody.innerHTML = '') and
//populates it with rows generated by createTableRow for each student in the students array.
//createTableRow: Creates a new table row (<tr>) for a given student object, populating it with data (<td>) and action buttons (Edit and Delete).
    function displayStudents(students) {
        studentTableBody.innerHTML = '';
        students.forEach((student, index) => {
            const row = createTableRow(student, index);
            studentTableBody.appendChild(row);
        });
    }

    function createTableRow(student, index) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${student.studentName}</td>
            <td>${student.admissionNumber}</td>
            <td>${student.className}</td>
            <td>${student.section}</td>
            <td>${formatDate(student.dateOfJoining)}</td>
            <td class="actions">
                <button class="edit" data-index="${index}">Edit</button>
                <button class="delete" data-admission="${student.admissionNumber}">Delete</button>
            </td>
        `;
        return row;
    }
//formatDate: Converts a date string (dateString) into a formatted date in MM/DD/YYYY format using toLocaleDateString.
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US');
    }

//Event Listeners: Handle interactions with the modal (studentModal) and form (studentForm).
//addStudentButton: Opens the modal form for adding a new student.
//closeModal: Closes the modal form.
//window click: Closes the modal if the user clicks outside of it (event.target === studentModal).
//studentForm submit: Handles form submission asynchronously.
//Collects form data (FormData) and constructs studentData object.
//Depending on isEditing flag, calls updateStudent or addStudent functions.
//After submission, fetches updated student data and closes the modal.
//Logs errors if any occur during submission or data fetching.
    addStudentButton.addEventListener('click', () => {
        studentForm.reset();
        modalTitle.textContent = 'Add New Student';
        isEditing = false;
        studentModal.style.display = 'block';
    });

    closeModal.addEventListener('click', () => {
        studentModal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === studentModal) {
            studentModal.style.display = 'none';
        }
    });

    studentForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(studentForm);
        const studentData = {
            studentName: formData.get('studentName'),
            admissionNumber: formData.get('admissionNumber'),
            className: formData.get('className'),
            section: formData.get('section'),
            dateOfJoining: formData.get('dateOfJoining')
        };

        try {
            if (isEditing) {
                await updateStudent(studentData);
            } else {
                await addStudent(studentData);
            }

            await fetchStudents();
            studentModal.style.display = 'none';
        } catch (error) {
            console.error('Error adding/updating student:', error.message);
        }
    });

//This function encapsulates the process of adding a student via an asynchronous network request,
//adhering to modern JavaScript practices using async/await for handling asynchronous operations and JSON for data serialization.
async function addStudent(student) {
    try {
        const response = await fetch('/api/Students/addStudent', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(student)
        });

        if (!response.ok) {
            throw new Error('Failed to add student');
        }

        // Handle success response if needed
    } catch (error) {
        console.error('Error adding student:', error);
        // Handle error display or logging
    }
}


//This function encapsulates the process of updating a student record via an asynchronous network request,
//following best practices with async/await for handling asynchronous operations and JSON for data serialization.
//Adjustments can be made based on specific API requirements or additional error handling needs in the application.
async function updateStudent(student) {
    try {
        const response = await fetch('/api/Students/updateStudent', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(student)
        });

        if (!response.ok) {
            throw new Error('Failed to update student');
        }

        // Handle success response if needed
    } catch (error) {
        console.error('Error updating student:', error);
        // Handle error display or logging
    }
}


    studentTableBody.addEventListener('click', (event) => {
        if (event.target.classList.contains('edit')) {
            const index = event.target.dataset.index;
            currentStudentIndex = index;
            const student = students[index];
            fillFormWithStudentData(student);
            modalTitle.textContent = 'Edit Student';
            isEditing = true;
            studentModal.style.display = 'block';
        }

        if (event.target.classList.contains('delete')) {
            const admissionNumber = event.target.dataset.admission;
            if (!confirm(`Are you sure you want to delete student with admission number ${admissionNumber}?`)) {
                return;
            }

            deleteStudent(admissionNumber);
        }
    });

    function fillFormWithStudentData(student) {
        studentForm.elements['studentName'].value = student.studentName;
        studentForm.elements['admissionNumber'].value = student.admissionNumber;
        studentForm.elements['className'].value = student.className;
        studentForm.elements['section'].value = student.section;
        studentForm.elements['dateOfJoining'].value = student.dateOfJoining;
    }

//This function encapsulates the process of deleting a student record via an asynchronous network request,
//adhering to best practices with async/await for handling asynchronous operations and HTTP DELETE method for resource removal.
//Adjustments can be made based on specific API requirements or additional error handling needs in the application.
async function deleteStudent(admissionNumber) {
    try {
        const response = await fetch(`/api/Students/deleteStudent/${admissionNumber}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('Failed to delete student');
        }

        await fetchStudents(); // Assuming this function fetches updated student list
    } catch (error) {
        console.error('Error deleting student:', error.message);
    }
}

//exit button
    logoutButton.addEventListener('click', () => {
        window.location.href = 'http://localhost:8080';
    });

    await fetchStudents();
});

